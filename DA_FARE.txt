COSE DA FARE

SIMULAZIONE EQUATION BASED
TEST CASE
Disegno del grafico con SFML
Passare sempre il codice per il clang format ($clang-format -i nome_file.cpp)
Far in modo che si possa eseguire l'intera simulazione senza scrivere tutti i file.cpp (dovrebbe farsi con CMake, da controllare)
Ingresso dati da file
Costruttore di default per l'ingresso
People(int x, int y, int z, int w) : s_{default}, i_{default}, r{default}, d{default} {
condizioni su x, y, z, w}
Rendere inline la dichiarazione dei metodi di una classe
Verificare la dimensione delle variabili supportata dal programma (per vedere fino a quante persone possiamo accettare)
Eventualmente implementare per accettare numeri double con decimale =0
Controllare per il control_SI che mettere entrambe le variabili uguali a zero sia effettivamente un runtime error (e non qualche altro tipo di errore)


Idee
1.Possiamo inserire all'interno del metodo setPeople un controllo del tipo (scritto male, sarebbe da mettere a posto)

void People::setPeople(){

if(S+I+R+D==0){
throw std::range_error("Invalid numbers. Please create a simulation with at least one person");}
else if(S==0 && R==0){
char c;
std:: cout << "Your simulation won't do anything. Do you want to continue? (y/n)" << std::endl;
//qui ci andrebbe uno switch, non ho voglia di scriverlo
(c=="n"){ std::cout << "End of program" << std::endl;
            abort();

else {
//in caso tutto vada bene esegue i 4 setter

    setSusceptible();
    setInfected();
    setRecovered();
    setDeads();
    
    }}}
INSERENDO QUESTO CONTROLLO possiamo gestire anche il caso in cui vuole provare a inserire valori =0
SIMULAZIONE AGENT BASED (la roba di Lune)


